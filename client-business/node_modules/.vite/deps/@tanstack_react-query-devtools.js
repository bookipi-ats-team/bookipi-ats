"use client";


import { __toESM } from "./chunk-DbKvDyjX.js";
import { require_react } from "./react-Dzmm40ca.js";
import { require_jsx_runtime } from "./jsx-runtime-B0kp3bGK.js";
import { onlineManager, useQueryClient } from "./modern-CbYwa4bq.js";
import { createComponent, createSignal, lazy, mergeProps, render, setupStyleSheet } from "./CXOMC62J-CKrvKzUm.js";

//#region node_modules/@tanstack/query-devtools/build/dev.js
var import_react = /* @__PURE__ */ __toESM(require_react(), 1);
var TanstackQueryDevtools = class {
	#client;
	#onlineManager;
	#queryFlavor;
	#version;
	#isMounted = false;
	#styleNonce;
	#shadowDOMTarget;
	#buttonPosition;
	#position;
	#initialIsOpen;
	#errorTypes;
	#hideDisabledQueries;
	#Component;
	#dispose;
	constructor(config) {
		const { client, queryFlavor, version, onlineManager: onlineManager$1, buttonPosition, position, initialIsOpen, errorTypes, styleNonce, shadowDOMTarget, hideDisabledQueries } = config;
		this.#client = createSignal(client);
		this.#queryFlavor = queryFlavor;
		this.#version = version;
		this.#onlineManager = onlineManager$1;
		this.#styleNonce = styleNonce;
		this.#shadowDOMTarget = shadowDOMTarget;
		this.#buttonPosition = createSignal(buttonPosition);
		this.#position = createSignal(position);
		this.#initialIsOpen = createSignal(initialIsOpen);
		this.#errorTypes = createSignal(errorTypes);
		this.#hideDisabledQueries = createSignal(hideDisabledQueries);
	}
	setButtonPosition(position) {
		this.#buttonPosition[1](position);
	}
	setPosition(position) {
		this.#position[1](position);
	}
	setInitialIsOpen(isOpen) {
		this.#initialIsOpen[1](isOpen);
	}
	setErrorTypes(errorTypes) {
		this.#errorTypes[1](errorTypes);
	}
	setClient(client) {
		this.#client[1](client);
	}
	mount(el) {
		if (this.#isMounted) throw new Error("Devtools is already mounted");
		const dispose = render(() => {
			const _self$ = this;
			const [btnPosition] = this.#buttonPosition;
			const [pos] = this.#position;
			const [isOpen] = this.#initialIsOpen;
			const [errors] = this.#errorTypes;
			const [hideDisabledQueries] = this.#hideDisabledQueries;
			const [queryClient] = this.#client;
			let Devtools;
			if (this.#Component) Devtools = this.#Component;
			else {
				Devtools = lazy(() => import("./6ELMOJL2-V1T074p2.js"));
				this.#Component = Devtools;
			}
			setupStyleSheet(this.#styleNonce, this.#shadowDOMTarget);
			return createComponent(Devtools, mergeProps({
				get queryFlavor() {
					return _self$.#queryFlavor;
				},
				get version() {
					return _self$.#version;
				},
				get onlineManager() {
					return _self$.#onlineManager;
				},
				get shadowDOMTarget() {
					return _self$.#shadowDOMTarget;
				}
			}, {
				get client() {
					return queryClient();
				},
				get buttonPosition() {
					return btnPosition();
				},
				get position() {
					return pos();
				},
				get initialIsOpen() {
					return isOpen();
				},
				get errorTypes() {
					return errors();
				},
				get hideDisabledQueries() {
					return hideDisabledQueries();
				}
			}));
		}, el);
		this.#isMounted = true;
		this.#dispose = dispose;
	}
	unmount() {
		if (!this.#isMounted) throw new Error("Devtools is not mounted");
		this.#dispose?.();
		this.#isMounted = false;
	}
};
var TanstackQueryDevtoolsPanel = class {
	#client;
	#onlineManager;
	#queryFlavor;
	#version;
	#isMounted = false;
	#styleNonce;
	#shadowDOMTarget;
	#buttonPosition;
	#position;
	#initialIsOpen;
	#errorTypes;
	#hideDisabledQueries;
	#onClose;
	#Component;
	#dispose;
	constructor(config) {
		const { client, queryFlavor, version, onlineManager: onlineManager$1, buttonPosition, position, initialIsOpen, errorTypes, styleNonce, shadowDOMTarget, onClose, hideDisabledQueries } = config;
		this.#client = createSignal(client);
		this.#queryFlavor = queryFlavor;
		this.#version = version;
		this.#onlineManager = onlineManager$1;
		this.#styleNonce = styleNonce;
		this.#shadowDOMTarget = shadowDOMTarget;
		this.#buttonPosition = createSignal(buttonPosition);
		this.#position = createSignal(position);
		this.#initialIsOpen = createSignal(initialIsOpen);
		this.#errorTypes = createSignal(errorTypes);
		this.#hideDisabledQueries = createSignal(hideDisabledQueries);
		this.#onClose = createSignal(onClose);
	}
	setButtonPosition(position) {
		this.#buttonPosition[1](position);
	}
	setPosition(position) {
		this.#position[1](position);
	}
	setInitialIsOpen(isOpen) {
		this.#initialIsOpen[1](isOpen);
	}
	setErrorTypes(errorTypes) {
		this.#errorTypes[1](errorTypes);
	}
	setClient(client) {
		this.#client[1](client);
	}
	setOnClose(onClose) {
		this.#onClose[1](() => onClose);
	}
	mount(el) {
		if (this.#isMounted) throw new Error("Devtools is already mounted");
		const dispose = render(() => {
			const _self$ = this;
			const [btnPosition] = this.#buttonPosition;
			const [pos] = this.#position;
			const [isOpen] = this.#initialIsOpen;
			const [errors] = this.#errorTypes;
			const [hideDisabledQueries] = this.#hideDisabledQueries;
			const [queryClient] = this.#client;
			const [onClose] = this.#onClose;
			let Devtools;
			if (this.#Component) Devtools = this.#Component;
			else {
				Devtools = lazy(() => import("./PULY4AJ7-CrEt_V0m.js"));
				this.#Component = Devtools;
			}
			setupStyleSheet(this.#styleNonce, this.#shadowDOMTarget);
			return createComponent(Devtools, mergeProps({
				get queryFlavor() {
					return _self$.#queryFlavor;
				},
				get version() {
					return _self$.#version;
				},
				get onlineManager() {
					return _self$.#onlineManager;
				},
				get shadowDOMTarget() {
					return _self$.#shadowDOMTarget;
				}
			}, {
				get client() {
					return queryClient();
				},
				get buttonPosition() {
					return btnPosition();
				},
				get position() {
					return pos();
				},
				get initialIsOpen() {
					return isOpen();
				},
				get errorTypes() {
					return errors();
				},
				get hideDisabledQueries() {
					return hideDisabledQueries();
				},
				get onClose() {
					return onClose();
				}
			}));
		}, el);
		this.#isMounted = true;
		this.#dispose = dispose;
	}
	unmount() {
		if (!this.#isMounted) throw new Error("Devtools is not mounted");
		this.#dispose?.();
		this.#isMounted = false;
	}
};

//#endregion
//#region node_modules/@tanstack/react-query-devtools/build/modern/ReactQueryDevtools.js
var import_jsx_runtime = /* @__PURE__ */ __toESM(require_jsx_runtime(), 1);
function ReactQueryDevtools(props) {
	const queryClient = useQueryClient(props.client);
	const ref = import_react.useRef(null);
	const { buttonPosition, position, initialIsOpen, errorTypes, styleNonce, shadowDOMTarget, hideDisabledQueries } = props;
	const [devtools] = import_react.useState(new TanstackQueryDevtools({
		client: queryClient,
		queryFlavor: "React Query",
		version: "5",
		onlineManager,
		buttonPosition,
		position,
		initialIsOpen,
		errorTypes,
		styleNonce,
		shadowDOMTarget,
		hideDisabledQueries
	}));
	import_react.useEffect(() => {
		devtools.setClient(queryClient);
	}, [queryClient, devtools]);
	import_react.useEffect(() => {
		if (buttonPosition) devtools.setButtonPosition(buttonPosition);
	}, [buttonPosition, devtools]);
	import_react.useEffect(() => {
		if (position) devtools.setPosition(position);
	}, [position, devtools]);
	import_react.useEffect(() => {
		devtools.setInitialIsOpen(initialIsOpen || false);
	}, [initialIsOpen, devtools]);
	import_react.useEffect(() => {
		devtools.setErrorTypes(errorTypes || []);
	}, [errorTypes, devtools]);
	import_react.useEffect(() => {
		if (ref.current) devtools.mount(ref.current);
		return () => {
			devtools.unmount();
		};
	}, [devtools]);
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
		dir: "ltr",
		className: "tsqd-parent-container",
		ref
	});
}

//#endregion
//#region node_modules/@tanstack/react-query-devtools/build/modern/ReactQueryDevtoolsPanel.js
function ReactQueryDevtoolsPanel(props) {
	const queryClient = useQueryClient(props.client);
	const ref = import_react.useRef(null);
	const { errorTypes, styleNonce, shadowDOMTarget, hideDisabledQueries } = props;
	const [devtools] = import_react.useState(new TanstackQueryDevtoolsPanel({
		client: queryClient,
		queryFlavor: "React Query",
		version: "5",
		onlineManager,
		buttonPosition: "bottom-left",
		position: "bottom",
		initialIsOpen: true,
		errorTypes,
		styleNonce,
		shadowDOMTarget,
		onClose: props.onClose,
		hideDisabledQueries
	}));
	import_react.useEffect(() => {
		devtools.setClient(queryClient);
	}, [queryClient, devtools]);
	import_react.useEffect(() => {
		devtools.setOnClose(props.onClose ?? (() => {}));
	}, [props.onClose, devtools]);
	import_react.useEffect(() => {
		devtools.setErrorTypes(errorTypes || []);
	}, [errorTypes, devtools]);
	import_react.useEffect(() => {
		if (ref.current) devtools.mount(ref.current);
		return () => {
			devtools.unmount();
		};
	}, [devtools]);
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
		style: {
			height: "500px",
			...props.style
		},
		className: "tsqd-parent-container",
		ref
	});
}

//#endregion
//#region node_modules/@tanstack/react-query-devtools/build/modern/index.js
var ReactQueryDevtools2 = ReactQueryDevtools;
var ReactQueryDevtoolsPanel2 = ReactQueryDevtoolsPanel;

//#endregion
export { ReactQueryDevtools2 as ReactQueryDevtools, ReactQueryDevtoolsPanel2 as ReactQueryDevtoolsPanel };
//# sourceMappingURL=@tanstack_react-query-devtools.js.map